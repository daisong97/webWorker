<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-3.2.xsd
           " default-lazy-init="true">
	<!-- 界面支持 -->
	<!-- <aop:aspectj-autoproxy/> <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"></bean> 
		<aop:config> <aop:advisor advice-ref=""/> </aop:config> -->
	<!-- <bean id="applicationContext" class="com.dais.common.app.ApplicationUtil"/> -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:cfg/jdbc.properties" />
	</bean>
	<context:annotation-config />
	<!-- 1、配置注解自动扫描的范围 -->
	<context:component-scan base-package="com.dais"></context:component-scan>
	<!-- 2、配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- 3、创建sessionfactory，这个是整合hibernate的入口 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 扫描映射文件，实体类 -->
		<property name="packagesToScan">
			<list>
				<value>com.dais.domain</value>
			</list>
		</property>
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
 				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key=" hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop>
			</props>
		</property>
	</bean>
	<bean  class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	<!-- 4、创建事务管理器 -->
	<bean id="txManage" 
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 5、以注解的形式管理事务 -->
	<tx:annotation-driven transaction-manager="txManage" />
	<tx:advice id="txAdvice" transaction-manager="txManage">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" read-only="true" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
	<!-- (execution(* com..bussiness..service.impl.*.*(..)) or (execution(* com..core.service.impl.*.*(..))) -->
	<!-- (execution(* com.dais.service.*.*(..))) -->
	<aop:pointcut id="transactionPointcut"
			expression="(execution(* com.dais.service.impl.*.*(..)))" />
	<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="txAdvice" />
	</aop:config>
	
	<bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>

    <!--ehcache-->
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:cfg/ehcache.xml"/>
    </bean>
	
<!-- shiro start-->
	<!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
     <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>
  	<!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
 	<!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
 	 <!-- 缓存管理器 -->
    <bean id="cacheManager" class="com.dais.expand.shiro.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="springCacheManager"/>
    </bean>
	<bean id="userRealm" class="com.dais.expand.shiro.UserRealm"> 
    	<!--  用来实现用户名密码的查询 --> 
<!-- 	    <property name="cacheManager" ref="shiroCacheManager"/>  -->
	    <!-- <property name="authenticationCacheName" value="shiroAuthorizationCache"></property> -->
  	</bean>
  	
  	<bean id="userRealmExtends" class="com.dais.expand.shiro.UserRealmExtends"> 
    	<!--  用来实现用户名密码的查询 --> 
<!-- 	    <property name="cacheManager" ref="shiroCacheManager"/>  -->
	    <!-- <property name="authenticationCacheName" value="shiroAuthorizationCache"></property> -->
  	</bean>
  	
  	
  	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"> 
   	 <!-- 	<property name="realm" ref="userRealm"/>  -->
   	 	<property name="realm" ref="userRealmExtends"/>
 	</bean> 
 	
 	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/> 
 	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
     	<property name="cacheManager" ref="cacheManager"/>  
    </bean>   
    <bean id="kickoutSessionControlFilter" class="com.dais.expand.filter.KickoutSessionControlFilter">
	    <property name="cacheManager" ref="cacheManager"/>
	    <property name="sessionManager" ref="sessionManager"/>
	
	    <property name="kickoutAfter" value="false"/>
	    <property name="maxSession" value="1"/>
	    <property name="kickoutUrl" value="/app/login?kickout=1"/>
	</bean>
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"/>
	<bean id="sysUserFilter" class="com.dais.expand.filter.SysUserFilter"/>
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/app/login"/> 
	    <property name="successUrl" value="/app/home"/> 
	    <property name="unauthorizedUrl" value="/app/login"/> 
	    <property name="filters">
	       <util:map> 
	         <entry key="authc" value-ref="formAuthenticationFilter"/> 
	         <entry key="sysUser" value-ref="sysUserFilter"/>
             <entry key="kickout" value-ref="kickoutSessionControlFilter"/>  
	       </util:map>
    	</property> 
	    <property name="filterChainDefinitions">
	       <value>
	       	 	/common/** = anon  
	       	 	/kaptcha.jpg = anon
				/**/doLogin = anon
				/**/loginOut = logout
				/**/getRememberMeUserName = anon
				/**= kickout,authc
<!--             	/** = user -->
	       </value> 
	    </property> 
	</bean>
<!-- shiro end -->
	<!-- google 验证码配置。 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.textproducer.font.color">blue</prop>  
                        <prop key="kaptcha.noise.color">blue</prop>  
                        <prop key="kaptcha.border">no</prop>  
                        <prop key="kaptcha.textproducer.char.space">4</prop>  
                        <prop key="kaptcha.textproducer.impl">com.web.ChineseText</prop>  
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>  
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
</beans>